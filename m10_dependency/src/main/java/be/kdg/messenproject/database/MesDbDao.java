package be.kdg.messenproject.database;

import be.kdg.messenproject.data.Data;
import be.kdg.messenproject.exceptions.MessenException;
import be.kdg.messenproject.model.Lemmet;
import be.kdg.messenproject.model.Mes;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Vincent Verboven
 * 23/10/2023
 */
public final class MesDbDao implements MesDao {

    private static MesDbDao INSTANCE;
    private Connection databaseCon;
    private static final Logger LOGGER = Logger.getLogger("be.kdg.model.MesDbDao");

    private MesDbDao(String databasePath) {
        makeConnection(databasePath);
        createTable();
    }

    public synchronized static MesDbDao getInstance(String databasePath) {
        if (INSTANCE == null) {
            INSTANCE = new MesDbDao(databasePath);
        }
        return INSTANCE;
    }

    private void makeConnection(String databasePath) {
        try {
            databaseCon = DriverManager.getConnection("jdbc:hsqldb:file:" + databasePath, "vv", "");
            LOGGER.log(Level.INFO, "Connectie geopend");
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
    }

    public void close() {
        if (databaseCon == null) return;
        try {
            databaseCon.close();
            LOGGER.log(Level.INFO, "Connectie gesloten");
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }

    }

    private void fillTable() {
        Data.getData().forEach(this::insert);
    }

    private void createTable() {
        try {
            Statement statement = databaseCon.createStatement();
            String createQuery = """
                    CREATE TABLE IF NOT EXISTS messendb
                    (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                    type VARCHAR(30) NOT NULL,
                    productieDag DATE,
                    lengte DOUBLE PRECISION NOT NULL,
                    materiaal VARCHAR(30) NOT NULL,
                    hardheid INT NOT NULL,
                    lemmet VARCHAR(30))
                    """;
            statement.execute(createQuery);
            ResultSet set = statement.executeQuery("select count(*) from messendb");
            set.next();
            if (set.getInt(1) == 0) {
                fillTable();
                LOGGER.log(Level.INFO, "Tabel aangemaakt en gevuld met data");
            }
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
    }

    private List<Mes> selectAll(){
        List<Mes> messen = new ArrayList<>();
        try {
            Statement statement = databaseCon.createStatement();
            ResultSet set = statement.executeQuery("SELECT * FROM messendb");
            while (set.next()) {
                messen.add(new Mes(set.getString("type"), set.getDate("productieDag").toLocalDate(), set.getDouble("lengte"), set.getInt("hardheid"),
                        set.getString("materiaal"), Lemmet.valueOf(set.getString("lemmet").toUpperCase()), set.getInt("id")));
            }
            LOGGER.log(Level.INFO, "Alle data opgehaald");
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
        return messen;
    }

    @Override
    public boolean insert(Mes mes) {
        if (mes.getId() >= 0) return false;
        try {
            String sql = """
                    INSERT INTO messendb
                    VALUES(null, ?, ?, ?, ?, ?, ?)
                    """;
            PreparedStatement statement = databaseCon.prepareStatement(sql);
            statement.setString(1, mes.getType());
            statement.setDate(2, Date.valueOf(mes.getProductieDag()));
            statement.setDouble(3, mes.getLengte());
            statement.setString(4, mes.getMateriaal());
            statement.setInt(5, mes.getHardheid());
            statement.setString(6, mes.getLemmet().toString());
            statement.executeUpdate();
            statement.close();
            LOGGER.log(Level.INFO, "Mes succesvol toegevoegd.");
            return true;
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
    }

    @Override
    public boolean delete(String params) {
        StringBuilder sql = new StringBuilder("""
                DELETE FROM messendb
                """);
        try {
            Statement statement = databaseCon.createStatement();
            if (params.equals("*")) {
                return statement.execute(sql.toString());
            }
            sql.append(" WHERE ").append(params);
            boolean deleted = statement.execute(sql.toString());
            if (deleted) LOGGER.log(Level.INFO, "Succesvol verwijderd");
            return deleted;
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
    }

    @Override
    public boolean update(Mes mes) {
        String sql = """
                UPDATE messendb
                SET type = ?, productieDag = ?, lengte = ?, hardheid = ?, materiaal = ?, lemmet = ?
                WHERE id = ?
                """;
        try (PreparedStatement statement = databaseCon.prepareStatement(sql)) {
            statement.setString(1, mes.getType());
            statement.setDate(2, Date.valueOf(mes.getProductieDag()));
            statement.setDouble(3, mes.getLengte());
            statement.setInt(4, mes.getHardheid());
            statement.setString(5, mes.getMateriaal());
            statement.setString(6, mes.getLemmet().toString());
            statement.setInt(7, mes.getId());
            boolean updated = statement.execute();
            if (updated) LOGGER.log(Level.INFO, "Succesvol geupdate");
            return updated;
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
    }

    @Override
    public Mes retrieve(int id) {
        String sql = """
                SELECT *
                FROM messendb
                WHERE id = ?
                """;
        try (PreparedStatement statement = databaseCon.prepareStatement(sql)) {

            statement.setInt(1, id);

            ResultSet set = statement.executeQuery();
            set.next();
            LOGGER.log(Level.INFO, "Mes succesvol opgehaald");
            return new Mes(set.getString("type"), set.getDate("productieDag").toLocalDate(), set.getDouble("lengte"), set.getInt("hardheid"),
                    set.getString("materiaal"), Lemmet.valueOf(set.getString("lemmet").toUpperCase()), set.getInt("id"));
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
    }

    @Override
    public List<Mes> SortedOn(String query) {
        List<Mes> messen = new ArrayList<>();
        try (PreparedStatement statement = databaseCon.prepareStatement(query)) {
            ResultSet rs = statement.executeQuery();
            while (rs.next())
                messen.add(new Mes(rs.getString("type"), rs.getDate("productieDag").toLocalDate(), rs.getDouble("lengte")
                        , rs.getInt("hardheid"), rs.getString("materiaal"), Lemmet.valueOf(rs.getString("lemmet").toUpperCase())));
            LOGGER.log(Level.INFO, "Alle messen opgehaald en gesorteerd.");
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, e.toString());
            throw new MessenException(e);
        }
        return messen;
    }

    @Override
    public List<Mes> getAllMessen(){
        return selectAll();
    }

    public List<Mes> SortedOnType() {
        return SortedOn("""
                SELECT *
                FROM messendb
                ORDER BY type
                """);
    }

    public List<Mes> SortedOnHardheid() {
        return SortedOn("""
                SELECT *
                FROM messendb
                ORDER BY hardheid
                """);
    }

    public List<Mes> SortedOnProductieDag() {
        return SortedOn("""
                SELECT *
                FROM messendb
                ORDER BY productieDag
                """);
    }

}
