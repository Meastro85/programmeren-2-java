package be.kdg.persist;

import be.kdg.model.Lemmet;
import be.kdg.model.Mes;
import org.hsqldb.jdbc.JDBCConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Vincent Verboven
 * 23/10/2023
 */
public class MesDbDao implements MesDao{

    private Connection databaseCon;
    private static final Logger LOGGER = Logger.getLogger("be.kdg.model.MesDbDao");

    public MesDbDao(String databasePath){
        makeConnection(databasePath);
        createTable();
    }

    private void makeConnection(String databasePath){
        try{
            databaseCon = DriverManager.getConnection("jdbc:hsqldb:file:" + databasePath, "vv","");
        }catch (SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }
    }

    public void close(){
        if(databaseCon == null) return;
        try{
            databaseCon.close();
        } catch(SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }

    }

    private void createTable(){
        try{
Statement statement =databaseCon.createStatement();
statement.execute("DROP TABLE IF EXISTS messendb");
String createQuery = """
        CREATE TABLE messendb
        (id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        type VARCHAR(30) NOT NULL,
        productieDag DATE,
        lengte DOUBLE PRECISION NOT NULL,
        materiaal VARCHAR(30) NOT NULL,
        hardheid INT NOT NULL,
        lemmet VARCHAR(30))
        """;
statement.execute(createQuery);
        } catch(SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }
    }

    public void selectAll() throws SQLException {
        Statement statement = databaseCon.createStatement();
        ResultSet set = statement.executeQuery("SELECT * FROM messendb WHERE id = 1");
        while(set.next()){
            System.out.println(set.getString("type"));
        }
    }

    @Override
    public boolean insert(Mes mes) {
        if(mes.getId() >= 0) return false;
try{
    String sql = """
            INSERT INTO messendb
            VALUES(null, ?, ?, ?, ?, ?, ?)
            """;
    PreparedStatement statement = databaseCon.prepareStatement(sql);
    statement.setString(1, mes.getType());
    statement.setDate(2, Date.valueOf(mes.getProductieDag()));
    statement.setDouble(3, mes.getLengte());
    statement.setString(4, mes.getMateriaal());
    statement.setInt(5,mes.getHardheid());
    statement.setString(6, mes.getLemmet().toString());
    statement.executeUpdate();
    statement.close();
    return true;
} catch(SQLException e){
    LOGGER.log(Level.SEVERE, e.toString());
}
        return false;
    }

    @Override
    public boolean delete(String params) {
        StringBuilder sql = new StringBuilder("""
                DELETE FROM messendb
                """);
        try{
            Statement statement = databaseCon.createStatement();
            if(params.equals("*")){
                return statement.execute(sql.toString());
            }
            sql.append(" WHERE ").append(params);
            return statement.execute(sql.toString());
        } catch(SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }
        return false;
    }

    @Override
    public boolean update(Mes mes) {
        String sql = """
                UPDATE messendb
                SET type = ?, productieDag = ?, lengte = ?, hardheid = ?, materiaal = ?, lemmet = ?
                WHERE id = ?
                """;
        try(PreparedStatement statement = databaseCon.prepareStatement(sql)){
            statement.setString(1, mes.getType());
            statement.setDate(2, Date.valueOf(mes.getProductieDag()));
            statement.setDouble(3, mes.getLengte());
            statement.setInt(4, mes.getHardheid());
            statement.setString(5, mes.getMateriaal());
            statement.setString(6, mes.getLemmet().toString());
            statement.setInt(7, mes.getId());
            return statement.execute();
        } catch(SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }
        return false;
    }

    @Override
    public Mes retrieve(int id) {
        String sql = """
                SELECT *
                FROM messendb
                WHERE id = ?
                """;
        try(PreparedStatement statement = databaseCon.prepareStatement(sql)){

            statement.setInt(1, id);

            ResultSet set = statement.executeQuery();
            set.next();
            return new Mes(set.getString("type"), set.getDate("productieDag").toLocalDate(),set.getDouble("lengte"),set.getInt("hardheid"),
                    set.getString("materiaal"), Lemmet.valueOf(set.getString("lemmet").toUpperCase()), set.getInt("id"));
        } catch(SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }
        return null;
    }

    @Override
    public List<Mes> SortedOn(String query) {
        List<Mes> messen = new ArrayList<>();
        try(PreparedStatement statement = databaseCon.prepareStatement(query)){
            ResultSet rs = statement.executeQuery();
            while(rs.next()) messen.add(new Mes(rs.getString("type"), rs.getDate("productieDag").toLocalDate(),rs.getDouble("lengte")
            ,rs.getInt("hardheid"),rs.getString("materiaal"),Lemmet.valueOf(rs.getString("lemmet").toUpperCase())));
        } catch(SQLException e){
            LOGGER.log(Level.SEVERE, e.toString());
        }
        return messen;
    }

    public List<Mes> SortedOnType(){
        return SortedOn("""
                SELECT *
                FROM messendb
                ORDER BY type
                """);
    }

    public List<Mes> SortedOnHardheid(){
        return SortedOn("""
                SELECT *
                FROM messendb
                ORDER BY hardheid
                """);
    }

    public List<Mes> SortedOnProductieDag(){
        return SortedOn("""
                SELECT *
                FROM messendb
                ORDER BY productieDag
                """);
    }

}
